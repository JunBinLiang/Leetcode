class Solution {
    private List<List<Integer>> result=new LinkedList();
    public List<List<Integer>> permute(int[] nums) {
        for(int i=0;i<nums.length;i++){
            List<Integer> list=new LinkedList();
            list.add(nums[i]);
            helper(nums,list);
        }
        return result;
    }
    
    public void helper(int[] nums,List<Integer>list){
        
        if(list.size()==nums.length){
            if(!result.contains(list)){
                result.add(list);
            }
            return;
        }
        
        for(int i=0;i<nums.length;i++){
            if(list.contains(nums[i])){
                continue;
            }
            List<Integer>  copylist=new LinkedList(list);
            copylist.add(nums[i]);
            helper(nums,copylist);
        }
    }
}


















var permute = function(nums) {
    let output = [];
    function backtrack(arr,dArray){
        if(arr.length==nums.length){
            output.push(arr)
            return
        }
        for(let i=0; i<dArray.length;i++){                 
            //increase output arr and reduce work on every recursion call
    backtrack(arr.concat(dArray[i]),dArray.filter((val)=>{return val!=dArray[i]}));
            }
    }
backtrack([],nums)
return output;
};