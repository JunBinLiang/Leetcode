/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import javafx.util.Pair;
class Solution {
    //private int firstHeight=0;
    //private int secondHeight=0;
    TreeNode mainRoot;
    private int depth1=-1;
    private int depth2=-1;
    private TreeNode parent1=null;
    private TreeNode parent2=null;
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root==null){
            return false;
        }

        
        mainRoot=root;
        helper(null,root,x,y);
        //System.out.println("parent1 "+parent1.val);
       // System.out.println("parent2  "+parent2.val);
       // System.out.println("depth1  "+depth1);
       // System.out.println("depth2  "+depth2);
        
        
        if(depth1!=depth2){
            return false;
        }
        
        if(parent1==parent2){
            return false;
        }

        return true;
    }
    
    public void helper(TreeNode parent,TreeNode root, int x, int y){
        if(root==null){
            return;
        }
        if(root.val==x){
            parent1=parent;
            depth1=depth(x);
        }
        if(root.val==y){
            parent2=parent;
            depth2=depth(y);
        }
        helper(root,root.left,x,y);
        helper(root,root.right,x,y);
        
        
        
        
        
    }
    
    
    public int depth(int key){
        Queue<Pair<TreeNode,Integer>>queue=new LinkedList();
        queue.add(new Pair<TreeNode,Integer>(mainRoot,0));
        int ans=0;
        while(queue.size()!=0){
            Pair<TreeNode,Integer> temp=queue.remove();
            int level=temp.getValue();
            TreeNode cur=temp.getKey();
            
            if(cur.val==key){
                ans=level;
                return level;
            }
            if(cur.left!=null){
                queue.add(new Pair<TreeNode,Integer>(cur.left,level+1));
            }
            if(cur.right!=null){
                queue.add(new Pair<TreeNode,Integer>(cur.right,level+1));
            }
        }
        
        return ans;
        
    }
}