
class Solution {
    private int result=0;
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length==0){
            return 0;
        }
     
        int rowLength=matrix.length;
        int colLength=matrix[0].length;
        for(int row=0;row<matrix.length;row++){
            for(int col=0;col<matrix[0].length;col++){
                if(matrix[row][col]=='1')
                {
                   
                    int rowDest=row;
                    int colDest=col;
                    //horizontally
                    while(rowDest<rowLength&&colDest<colLength){
                        if(matrix[rowDest][colDest]!='1'){
                            break;
                        }
                        
                        while(colDest<colLength){
                            boolean check=checker(matrix,row,col,rowDest,colDest);
                            if(!check){
                                break;
                            }
                            colDest++;
                        }
                        
                        int area=(rowDest-row+1)*((colDest-1)-col+1);
                        if(result<area){
                            result=area;
                        }
                        
                        colDest=col;
                        rowDest++;
                    }
                    rowDest=row;
                    colDest=col;
                    
                     while(rowDest<rowLength&&colDest<colLength){
                        if(matrix[rowDest][colDest]!='1'){
                            break;
                        }
                        
                        while(rowDest<rowLength){
                            boolean check=checker(matrix,row,col,rowDest,colDest);
                            if(!check){
                                break;
                            }
                            rowDest++;
                        }
                        
                        int area=((rowDest-1)-row+1)*(colDest-col+1);
                        if(result<area){
                            result=area;
                        }
                        
                        colDest++;
                        rowDest=row;
                    }                                       
                }//if is 1
            }
        }
        
        return result;
    }
    
    
    public boolean checker(char[][] matrix,int row,int col, int rowDest,int colDest)
    {
        for(int i=row;i<=rowDest;i++)
        {
            for(int j=col;j<=colDest;j++){
                if(matrix[i][j]!='1'){
                    return false;
                }
            }
        }
        return true;        
        
    }
}
























class Solution {
    private int result=0;
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length==0){
            return 0;
        }
     
        int rowLength=matrix.length;
        int colLength=matrix[0].length;
        for(int row=0;row<matrix.length;row++){
            for(int col=0;col<matrix[0].length;col++){
                if(matrix[row][col]=='1')
                {
                   
                    int rowDest=row;
                    int colDest=col;
                    //horizontally
                    while(rowDest<rowLength&&colDest<colLength){
                        if(matrix[rowDest][colDest]!='1'){
                            break;
                        }
                        
                        while(colDest<colLength){
                            boolean check=checker(matrix,row,col,rowDest,colDest);
                            if(!check){
                                break;
                            }
                            colDest++;
                        }
                        
                        int area=(rowDest-row+1)*((colDest-1)-col+1);
                        if(result<area){
                            result=area;
                        }
                        
                        colDest=col;
                        rowDest++;
                    }
                                     
                }//if is 1
            }
        }
        
        return result;
    }
    
    
    public boolean checker(char[][] matrix,int row,int col, int rowDest,int colDest)
    {
        for(int i=row;i<=rowDest;i++)
        {
            for(int j=col;j<=colDest;j++){
                if(matrix[i][j]!='1'){
                    return false;
                }
            }
        }
        return true;        
        
    }
}